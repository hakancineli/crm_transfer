// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant yapısı
model Tenant {
  id              String        @id @default(uuid())
  subdomain       String        @unique
  companyName     String
  domain          String?
  isActive        Boolean       @default(true)
  subscriptionPlan String       @default("basic")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  modules         TenantModule[]
  users           TenantUser[]
  reservations    Reservation[]
  activities      Activity[]
  hotelRequests   HotelRequest[]
  hotelBookings   HotelBooking[]
  hotelPricePool  HotelPricePool[]
  
  @@map("tenants")
}

model Module {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  isActive      Boolean       @default(true)
  priceMonthly  Float         @default(0)
  priceYearly   Float         @default(0)
  features      String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  tenantModules TenantModule[]
  
  @@map("modules")
}

model TenantModule {
  id          String   @id @default(uuid())
  tenantId    String
  moduleId    String
  isEnabled   Boolean  @default(false)
  activatedAt DateTime?
  expiresAt   DateTime?
  features    String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, moduleId])
  @@map("tenant_modules")
}

model TenantUser {
  id          String   @id @default(uuid())
  tenantId    String
  userId      String
  role        String   @default("USER")
  permissions String[] @default([])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@map("tenant_users")
}

model Driver {
  id            String        @id @default(uuid())
  name          String
  phoneNumber   String?
  reservations  Reservation[]
  createdAt     DateTime      @default(now())
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique
  email         String        @unique
  password      String
  name          String
  role          UserRole      @default(SELLER)
  isActive      Boolean       @default(true)
  createdBy     String?       // Süperkullanıcı tarafından oluşturulan
  creator       User?         @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers  User[]        @relation("UserCreator")
  reservations  Reservation[]
  activities    Activity[]    @relation("UserActivities")
  permissions   UserPermission[]
  tenantUsers   TenantUser[]
  hotelRequests HotelRequest[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model UserPermission {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission    String   // VIEW_OWN_SALES, VIEW_ALL_RESERVATIONS, VIEW_REPORTS, VIEW_ACCOUNTING
  grantedBy     String?  // Who granted this permission
  grantedAt     DateTime @default(now())
  isActive      Boolean  @default(true)
}

model Activity {
  id            String   @id @default(uuid())
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])
  userId        String
  user          User     @relation("UserActivities", fields: [userId], references: [id])
  action        String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  entityType    String   // USER, RESERVATION, DRIVER, etc.
  entityId      String?  // ID of the affected entity
  description   String   // Human readable description
  details       Json?    // Additional details as JSON
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())
}

enum UserRole {
  SUPERUSER
  OPERATION
  SELLER
  ACCOUNTANT
}

model Reservation {
  id            String   @id @default(uuid())
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])
  date          String
  time          String
  from          String
  to            String
  flightCode    String
  passengerNames String  // JSON string olarak saklayacağız
  luggageCount  Int
  price         Float
  currency      String
  phoneNumber   String?  // Yeni alan
  distanceKm    Float?   // Mesafe (km)
  voucherNumber String   @unique
  driverFee     Float?   // Sürücü hakediş tutarı (opsiyonel)
  driverId      String?  // Sürücü ID (opsiyonel)
  driver        Driver?  @relation(fields: [driverId], references: [id])
  userId        String?  // Rezervasyonu oluşturan kullanıcı
  user          User?    @relation(fields: [userId], references: [id])
  paymentStatus String   @default("PENDING") // PENDING, RECEIVED, NOT_RECEIVED
  createdAt     DateTime @default(now())
  
  // Dönüş transferi ilişkisi
  returnTransferId String?   @unique // Dönüş transferinin ID'si
  returnTransfer   Reservation? @relation("ReturnTransfer", fields: [returnTransferId], references: [id])
  originalTransfer Reservation? @relation("ReturnTransfer")
  isReturn        Boolean     @default(false) // Dönüş transferi olup olmadığını belirten alan
  
  // Konaklama ilişkisi
  hotelBookings  HotelBooking[]
}

// Konaklama modülü modelleri
model HotelRequest {
  id              String   @id @default(uuid())
  tenantId        String?
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  customerName    String
  customerEmail   String
  customerPhone   String
  checkin         DateTime
  checkout        DateTime
  adults          Int
  children        Int      @default(0)
  rooms           Int      @default(1)
  city            String
  region          String?
  budget          Float?
  roomType        String?  // Single, Double, Suite, etc.
  breakfast       Boolean  @default(false)
  amenities       String[] @default([])
  specialRequests String?
  status          String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, CANCELLED
  assignedTo      String?  // User ID who is handling this request
  user            User?    @relation(fields: [assignedTo], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  hotelBookings   HotelBooking[]
  
  @@map("hotel_requests")
}

model HotelBooking {
  id                String   @id @default(uuid())
  tenantId          String?
  tenant            Tenant?  @relation(fields: [tenantId], references: [id])
  requestId         String?
  request           HotelRequest? @relation(fields: [requestId], references: [id])
  reservationId     String?
  reservation       Reservation? @relation(fields: [reservationId], references: [id])
  hotelId           String
  hotelName         String
  hotelAddress      String
  roomType          String
  checkin           DateTime
  checkout          DateTime
  adults            Int
  children          Int
  rooms             Int
  
  // Acente fiyatlandırma
  customerPrice     Float    // Müşteriye satış fiyatı
  agentPrice        Float    // Acente alış fiyatı
  profitMargin      Float    // Kar marjı
  totalPrice        Float    // Toplam fiyat (customerPrice * nights)
  currency          String   @default("EUR")
  
  // Voucher sistemi
  voucherNumber     String   @unique // Transfer voucher numarasıyla entegre
  bookingReference  String   @unique
  status            String   @default("CONFIRMED") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  customerInfo      Json     // Customer details as JSON
  specialRequests   String?
  cancellationPolicy String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("hotel_bookings")
}

// Otel Fiyat Havuzu - Tüm satış personelinin görebileceği fiyatlar
model HotelPricePool {
  id              String    @id @default(uuid())
  tenantId        String
  hotelId         String    // Booking.com hotel ID
  hotelName       String
  hotelAddress    String
  hotelCity       String
  hotelCountry    String
  hotelRating     Float
  hotelStars      Int
  hotelImage      String?
  hotelAmenities  String[]  @default([])
  
  // Oda bilgileri
  roomType        String
  roomName        String
  roomDescription String?
  roomAmenities   String[]  @default([])
  maxOccupancy    Int
  bedType         String
  roomSize        String?
  roomView        String?
  
  // Fiyat bilgileri
  basePrice       Float     // Booking.com'dan alınan temel fiyat
  agentPrice      Float     // Acente alış fiyatı
  customerPrice   Float     // Müşteri satış fiyatı
  profitMargin    Float     // Kar marjı
  profitPercentage Float    // Kar yüzdesi
  currency        String    @default("EUR")
  
  // Tarih aralığı
  validFrom       DateTime  // Geçerlilik başlangıç tarihi
  validTo         DateTime  // Geçerlilik bitiş tarihi
  
  // Rezervasyon koşulları
  cancellationPolicy String?
  breakfastIncluded  Boolean @default(false)
  freeCancellation   Boolean @default(false)
  
  // Meta bilgiler
  source          String    @default("booking.com") // Fiyat kaynağı
  lastUpdated     DateTime  @default(now())
  updatedBy       String    // Güncelleyen kullanıcı ID
  isActive        Boolean   @default(true)
  
  // Relations
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("hotel_price_pool")
  @@index([tenantId, hotelId, validFrom, validTo])
  @@index([hotelCity, validFrom, validTo])
  @@index([isActive, validFrom, validTo])
}
