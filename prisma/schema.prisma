// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id            String        @id @default(uuid())
  name          String
  phoneNumber   String?
  reservations  Reservation[]
  createdAt     DateTime      @default(now())
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique
  email         String        @unique
  password      String
  name          String
  role          UserRole      @default(SELLER)
  isActive      Boolean       @default(true)
  createdBy     String?       // Süperkullanıcı tarafından oluşturulan
  creator       User?         @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers  User[]        @relation("UserCreator")
  reservations  Reservation[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum UserRole {
  SUPERUSER
  OPERATOR
  SELLER
}

model Reservation {
  id            String   @id @default(uuid())
  date          String
  time          String
  from          String
  to            String
  flightCode    String
  passengerNames String  // JSON string olarak saklayacağız
  luggageCount  Int
  price         Float
  currency      String
  phoneNumber   String?  // Yeni alan
  distanceKm    Float?   // Mesafe (km)
  voucherNumber String   @unique
  driverFee     Float?   // Sürücü hakediş tutarı (opsiyonel)
  driverId      String?  // Sürücü ID (opsiyonel)
  driver        Driver?  @relation(fields: [driverId], references: [id])
  userId        String?  // Rezervasyonu oluşturan kullanıcı
  user          User?    @relation(fields: [userId], references: [id])
  paymentStatus String   @default("PENDING") // PENDING, RECEIVED, NOT_RECEIVED
  createdAt     DateTime @default(now())
  
  // Dönüş transferi ilişkisi
  returnTransferId String?   @unique // Dönüş transferinin ID'si
  returnTransfer   Reservation? @relation("ReturnTransfer", fields: [returnTransferId], references: [id])
  originalTransfer Reservation? @relation("ReturnTransfer")
  isReturn        Boolean     @default(false) // Dönüş transferi olup olmadığını belirten alan
}
