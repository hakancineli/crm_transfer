const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createModules() {
  try {
    console.log('Mod√ºller olu≈üturuluyor...');

    // Transfer mod√ºl√º
    const transferModule = await prisma.module.upsert({
      where: { name: 'Transfer Y√∂netimi' },
      update: {},
      create: {
        name: 'Transfer Y√∂netimi',
        description: 'Transfer rezervasyonlarƒ±, ≈üof√∂r y√∂netimi ve u√ßu≈ü takibi',
        isActive: true,
        priceMonthly: 50,
        priceYearly: 500,
        features: JSON.stringify([
          'rezervasyon-yonetimi',
          'sofor-yonetimi', 
          'ucus-takibi',
          'musteri-yonetimi',
          'raporlama'
        ])
      }
    });
    console.log('‚úÖ Transfer mod√ºl√º olu≈üturuldu:', transferModule.id);

    // Konaklama mod√ºl√º
    const accommodationModule = await prisma.module.upsert({
      where: { name: 'Konaklama Y√∂netimi' },
      update: {},
      create: {
        name: 'Konaklama Y√∂netimi',
        description: 'Otel rezervasyonlarƒ± ve konaklama y√∂netimi',
        isActive: true,
        priceMonthly: 75,
        priceYearly: 750,
        features: JSON.stringify([
          'otel-rezervasyon',
          'booking-api-entegrasyonu',
          'oda-yonetimi',
          'konaklama-raporlari',
          'musteri-tercihleri'
        ])
      }
    });
    console.log('‚úÖ Konaklama mod√ºl√º olu≈üturuldu:', accommodationModule.id);

    // U√ßu≈ü mod√ºl√º
    const flightModule = await prisma.module.upsert({
      where: { name: 'U√ßu≈ü Y√∂netimi' },
      update: {},
      create: {
        name: 'U√ßu≈ü Y√∂netimi',
        description: 'U√ßu≈ü rezervasyonlarƒ± ve takibi',
        isActive: true,
        priceMonthly: 25,
        priceYearly: 250,
        features: JSON.stringify([
          'ucus-rezervasyon',
          'ucus-takibi',
          'bilet-yonetimi',
          'ucus-raporlari'
        ])
      }
    });
    console.log('‚úÖ U√ßu≈ü mod√ºl√º olu≈üturuldu:', flightModule.id);

    // Tur mod√ºl√º
    const tourModule = await prisma.module.upsert({
      where: { name: 'Tur Y√∂netimi' },
      update: {},
      create: {
        name: 'Tur Y√∂netimi',
        description: 'Tur rezervasyonlarƒ± ve tur y√∂netimi',
        isActive: true,
        priceMonthly: 60,
        priceYearly: 600,
        features: JSON.stringify([
          'tur-rezervasyon',
          'rota-yonetimi',
          'arac-yonetimi',
          'tur-raporlari',
          'musteri-yonetimi'
        ])
      }
    });
    console.log('‚úÖ Tur mod√ºl√º olu≈üturuldu:', tourModule.id);

    console.log('\nüéâ T√ºm mod√ºller ba≈üarƒ±yla olu≈üturuldu!');
    
    // Mevcut tenant'lara mod√ºlleri varsayƒ±lan olarak ekle
    const tenants = await prisma.tenant.findMany();
    console.log(`\n${tenants.length} tenant bulundu, mod√ºller ekleniyor...`);
    
    for (const tenant of tenants) {
      // Transfer mod√ºl√º
      const existingTransferModule = await prisma.tenantModule.findUnique({
        where: {
          tenantId_moduleId: {
            tenantId: tenant.id,
            moduleId: transferModule.id
          }
        }
      });

      if (!existingTransferModule) {
        await prisma.tenantModule.create({
          data: {
            tenantId: tenant.id,
            moduleId: transferModule.id,
            isEnabled: true,
            activatedAt: new Date(),
            features: JSON.stringify([
              'rezervasyon-yonetimi',
              'sofor-yonetimi', 
              'ucus-takibi',
              'musteri-yonetimi',
              'raporlama'
            ])
          }
        });
        console.log(`‚úÖ ${tenant.companyName} i√ßin transfer mod√ºl√º eklendi`);
      } else {
        console.log(`‚ÑπÔ∏è  ${tenant.companyName} zaten transfer mod√ºl√ºne sahip`);
      }

      // Tur mod√ºl√º
      const existingTourModule = await prisma.tenantModule.findUnique({
        where: {
          tenantId_moduleId: {
            tenantId: tenant.id,
            moduleId: tourModule.id
          }
        }
      });

      if (!existingTourModule) {
        await prisma.tenantModule.create({
          data: {
            tenantId: tenant.id,
            moduleId: tourModule.id,
            isEnabled: true,
            activatedAt: new Date(),
            features: JSON.stringify([
              'tur-rezervasyon',
              'rota-yonetimi',
              'arac-yonetimi',
              'tur-raporlari',
              'musteri-yonetimi'
            ])
          }
        });
        console.log(`‚úÖ ${tenant.companyName} i√ßin tur mod√ºl√º eklendi`);
      } else {
        console.log(`‚ÑπÔ∏è  ${tenant.companyName} zaten tur mod√ºl√ºne sahip`);
      }
    }

  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createModules();
