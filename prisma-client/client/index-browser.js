
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  subdomain: 'subdomain',
  companyName: 'companyName',
  domain: 'domain',
  isActive: 'isActive',
  subscriptionPlan: 'subscriptionPlan',
  websiteModuleEnabled: 'websiteModuleEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentAccountHolder: 'paymentAccountHolder',
  paymentBank: 'paymentBank',
  paymentIban: 'paymentIban'
};

exports.Prisma.ModuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  priceMonthly: 'priceMonthly',
  priceYearly: 'priceYearly',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantModuleScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  moduleId: 'moduleId',
  isEnabled: 'isEnabled',
  activatedAt: 'activatedAt',
  expiresAt: 'expiresAt',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantUserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  userId: 'userId',
  role: 'role',
  permissions: 'permissions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phoneNumber: 'phoneNumber',
  tenantId: 'tenantId',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permission: 'permission',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  isActive: 'isActive'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  description: 'description',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  tenantId: 'tenantId'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  date: 'date',
  time: 'time',
  from: 'from',
  to: 'to',
  flightCode: 'flightCode',
  passengerNames: 'passengerNames',
  luggageCount: 'luggageCount',
  price: 'price',
  currency: 'currency',
  phoneNumber: 'phoneNumber',
  voucherNumber: 'voucherNumber',
  driverFee: 'driverFee',
  driverId: 'driverId',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  returnTransferId: 'returnTransferId',
  isReturn: 'isReturn',
  distanceKm: 'distanceKm',
  userId: 'userId',
  tenantId: 'tenantId',
  companyCommissionStatus: 'companyCommissionStatus',
  notes: 'notes',
  email: 'email',
  type: 'type'
};

exports.Prisma.HotelRequestScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  checkin: 'checkin',
  checkout: 'checkout',
  adults: 'adults',
  children: 'children',
  rooms: 'rooms',
  city: 'city',
  region: 'region',
  budget: 'budget',
  roomType: 'roomType',
  breakfast: 'breakfast',
  amenities: 'amenities',
  specialRequests: 'specialRequests',
  status: 'status',
  assignedTo: 'assignedTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelBookingScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  requestId: 'requestId',
  reservationId: 'reservationId',
  hotelId: 'hotelId',
  hotelName: 'hotelName',
  hotelAddress: 'hotelAddress',
  roomType: 'roomType',
  checkin: 'checkin',
  checkout: 'checkout',
  adults: 'adults',
  children: 'children',
  rooms: 'rooms',
  totalPrice: 'totalPrice',
  currency: 'currency',
  bookingReference: 'bookingReference',
  status: 'status',
  customerInfo: 'customerInfo',
  specialRequests: 'specialRequests',
  cancellationPolicy: 'cancellationPolicy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  agentPrice: 'agentPrice',
  customerPrice: 'customerPrice',
  profitMargin: 'profitMargin',
  voucherNumber: 'voucherNumber'
};

exports.Prisma.HotelPricePoolScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  hotelId: 'hotelId',
  hotelName: 'hotelName',
  hotelAddress: 'hotelAddress',
  hotelCity: 'hotelCity',
  hotelCountry: 'hotelCountry',
  hotelRating: 'hotelRating',
  hotelStars: 'hotelStars',
  hotelImage: 'hotelImage',
  hotelAmenities: 'hotelAmenities',
  roomType: 'roomType',
  roomName: 'roomName',
  roomDescription: 'roomDescription',
  roomAmenities: 'roomAmenities',
  maxOccupancy: 'maxOccupancy',
  bedType: 'bedType',
  roomSize: 'roomSize',
  roomView: 'roomView',
  basePrice: 'basePrice',
  agentPrice: 'agentPrice',
  customerPrice: 'customerPrice',
  profitMargin: 'profitMargin',
  profitPercentage: 'profitPercentage',
  currency: 'currency',
  validFrom: 'validFrom',
  validTo: 'validTo',
  cancellationPolicy: 'cancellationPolicy',
  breakfastIncluded: 'breakfastIncluded',
  freeCancellation: 'freeCancellation',
  source: 'source',
  lastUpdated: 'lastUpdated',
  updatedBy: 'updatedBy',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  type: 'type',
  capacity: 'capacity',
  licensePlate: 'licensePlate',
  driverName: 'driverName',
  driverPhone: 'driverPhone',
  isAvailable: 'isAvailable',
  lastMaintenance: 'lastMaintenance',
  tenantId: 'tenantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourBookingScalarFieldEnum = {
  id: 'id',
  voucherNumber: 'voucherNumber',
  routeName: 'routeName',
  vehicleType: 'vehicleType',
  groupSize: 'groupSize',
  price: 'price',
  currency: 'currency',
  pickupLocation: 'pickupLocation',
  tourDate: 'tourDate',
  tourTime: 'tourTime',
  passengerNames: 'passengerNames',
  notes: 'notes',
  status: 'status',
  tenantId: 'tenantId',
  userId: 'userId',
  driverId: 'driverId',
  driverFee: 'driverFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tourDuration: 'tourDuration'
};

exports.Prisma.TenantWebsiteScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  domain: 'domain',
  subdomain: 'subdomain',
  isActive: 'isActive',
  theme: 'theme',
  customCSS: 'customCSS',
  favicon: 'favicon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebsitePageScalarFieldEnum = {
  id: 'id',
  websiteId: 'websiteId',
  slug: 'slug',
  title: 'title',
  content: 'content',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  isPublished: 'isPublished',
  isHomepage: 'isHomepage',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebsiteSettingsScalarFieldEnum = {
  id: 'id',
  websiteId: 'websiteId',
  companyName: 'companyName',
  logo: 'logo',
  heroTitle: 'heroTitle',
  heroSubtitle: 'heroSubtitle',
  heroImage: 'heroImage',
  contactInfo: 'contactInfo',
  socialMedia: 'socialMedia',
  seoSettings: 'seoSettings',
  colorScheme: 'colorScheme',
  customCSS: 'customCSS',
  analyticsCode: 'analyticsCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebsiteSectionScalarFieldEnum = {
  id: 'id',
  websiteId: 'websiteId',
  sectionType: 'sectionType',
  title: 'title',
  content: 'content',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPERUSER: 'SUPERUSER',
  OPERATION: 'OPERATION',
  SELLER: 'SELLER',
  ACCOUNTANT: 'ACCOUNTANT',
  AGENCY_ADMIN: 'AGENCY_ADMIN',
  AGENCY_USER: 'AGENCY_USER'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  Module: 'Module',
  TenantModule: 'TenantModule',
  TenantUser: 'TenantUser',
  Driver: 'Driver',
  User: 'User',
  UserPermission: 'UserPermission',
  Activity: 'Activity',
  Reservation: 'Reservation',
  HotelRequest: 'HotelRequest',
  HotelBooking: 'HotelBooking',
  HotelPricePool: 'HotelPricePool',
  Vehicle: 'Vehicle',
  TourBooking: 'TourBooking',
  TenantWebsite: 'TenantWebsite',
  WebsitePage: 'WebsitePage',
  WebsiteSettings: 'WebsiteSettings',
  WebsiteSection: 'WebsiteSection'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
