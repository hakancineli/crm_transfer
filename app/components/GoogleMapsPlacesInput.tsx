'use client';

import { useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { useGoogleMaps } from '@/app/hooks/useGoogleMaps';

interface GoogleMapsPlacesInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder: string;
  className?: string;
  required?: boolean;
  id?: string;
  name?: string;
  forceFallback?: boolean;
}

export default function GoogleMapsPlacesInput({
  value,
  onChange,
  placeholder,
  className = '',
  required = false,
  id,
  name,
  forceFallback = false
}: GoogleMapsPlacesInputProps) {
  const inputRef = useRef<HTMLInputElement>(null);
  const [predictions, setPredictions] = useState<Array<{ description: string }>>([]);
  const [showPredictions, setShowPredictions] = useState(false);
  const { isLoaded: googleReady, isLoading, error } = useGoogleMaps();
  const [portalRect, setPortalRect] = useState<{ top: number; left: number; width: number } | null>(null);

  const updatePortalRect = () => {
    if (typeof window === 'undefined') return;
    const el = inputRef.current;
    if (!el) return;
    const r = el.getBoundingClientRect();
    setPortalRect({ top: r.bottom + window.scrollY, left: r.left + window.scrollX, width: r.width });
  };

  // Fallback adres √∂nerileri (Google Maps API olmadan)
  const fallbackAddresses = [
    'ƒ∞stanbul Havalimanƒ± (IST)',
    'Sabiha G√∂k√ßen Havalimanƒ± (SAW)',
    'Taksim Meydanƒ±',
    'Sultanahmet Camii',
    'Galata Kulesi',
    'Boƒüazi√ßi K√∂pr√ºs√º',
    'Ortak√∂y Camii',
    'Be≈üikta≈ü',
    'Kadƒ±k√∂y',
    '√úsk√ºdar',
    'Beyoƒülu',
    '≈ûi≈üli',
    'Levent',
    'Maslak',
    'Etiler',
    'Bebek',
    'Arnavutk√∂y',
    'Sarƒ±yer',
    'Fatih',
    'Emin√∂n√º',
    'Karak√∂y',
    'Cihangir',
    'Ni≈üanta≈üƒ±',
    'Osmanbey',
    'Mecidiyek√∂y',
    'Gayrettepe',
    '4. Levent',
    'Ata≈üehir',
    'Kartal',
    'Pendik',
    'Maltepe',
    'Bostancƒ±',
    'Kadƒ±k√∂y ƒ∞skele',
    '√úsk√ºdar ƒ∞skele',
    'Emin√∂n√º ƒ∞skele',
    'Karak√∂y ƒ∞skele',
    'Laleli',
    'Laleli Camii',
    'Laleli Mahallesi',
    'Laleli Oteller B√∂lgesi',
    'Laleli Metro ƒ∞stasyonu',
    'Laleli √áar≈üƒ±sƒ±',
    'Laleli Han',
    'Laleli K√ºlt√ºr Merkezi',
    'Laleli Parkƒ±',
    'Laleli Meydanƒ±'
  ];

  // Google Places API ile √∂neri iste
  const requestPredictions = (inputValue: string) => {
    console.log('üîç Requesting predictions for:', inputValue, 'Google ready:', googleReady);
    
    if (!inputValue || inputValue.length < 1) {
      setPredictions([]);
      setShowPredictions(false);
      return;
    }

    // API key ge√ßersizse veya Google hazƒ±r deƒüilse fallback kullan
    if (forceFallback || !googleReady) {
      console.log('üìù Using fallback suggestions (Google not ready)');
      const filtered = fallbackAddresses.filter(addr =>
        addr.toLowerCase().includes(inputValue.toLowerCase())
      );
      const suggestions = filtered.map(addr => ({ description: addr })).slice(0, 5);
      console.log('üìù Fallback suggestions:', suggestions);
      setPredictions(suggestions);
      setShowPredictions(true);
      return;
    }

    const g = (window as any).google;
    if (!g?.maps?.places?.AutocompleteService) {
      console.log('‚ùå Google Maps AutocompleteService not available, using fallback');
      const filtered = fallbackAddresses.filter(addr =>
        addr.toLowerCase().includes(inputValue.toLowerCase())
      );
      const suggestions = filtered.map(addr => ({ description: addr })).slice(0, 5);
      setPredictions(suggestions);
      setShowPredictions(true);
      return;
    }

    console.log('üåç Using Google Places API');
    const service = new g.maps.places.AutocompleteService();
    const sessionToken = g.maps.places.AutocompleteSessionToken ? new g.maps.places.AutocompleteSessionToken() : undefined;
    
    service.getPlacePredictions(
      { 
        input: inputValue, 
        componentRestrictions: { country: ['tr'] }, 
        sessionToken, 
        language: 'tr', 
        region: 'TR' 
      },
      (preds: Array<{ description: string }> | null, status: string) => {
        console.log('üåç Google Places response:', { preds, status });
        
        // Eƒüer API hatasƒ± varsa fallback kullan
        if (status && status !== 'OK') {
          console.warn('‚ùå Places API error:', status, 'Using fallback');
          const filtered = fallbackAddresses.filter(addr =>
            addr.toLowerCase().includes(inputValue.toLowerCase())
          );
          const suggestions = filtered.map(addr => ({ description: addr })).slice(0, 5);
          console.log('üìù Fallback suggestions:', suggestions);
          setPredictions(suggestions);
          setShowPredictions(true);
          return;
        }
        
        const list = preds || [];
        console.log('‚úÖ Google suggestions:', list.slice(0, 5));
        setPredictions(list.slice(0, 5));
        setShowPredictions(true);
      }
    );
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    onChange(inputValue);
    requestPredictions(inputValue);
    updatePortalRect();
  };

  const handleSuggestionClick = (prediction: { description: string }) => {
    onChange(prediction.description);
    setShowPredictions(false);
    setPredictions([]);
  };

  const handleBlur = () => {
    // Kƒ±sa bir gecikme ile suggestions'ƒ± kapat
    setTimeout(() => {
      setShowPredictions(false);
    }, 200);
  };

  const handleFocus = () => {
    if (predictions.length > 0) {
      setShowPredictions(true);
    }
    updatePortalRect();
  };

  // Reposition on scroll/resize while dropdown is visible
  useEffect(() => {
    if (!showPredictions) return;
    const handler = () => updatePortalRect();
    window.addEventListener('scroll', handler, true);
    window.addEventListener('resize', handler);
    handler();
    return () => {
      window.removeEventListener('scroll', handler, true);
      window.removeEventListener('resize', handler);
    };
  }, [showPredictions]);

  return (
    <div className="relative">
      <input
        ref={inputRef}
        type="text"
        value={value}
        onChange={handleInputChange}
        onBlur={handleBlur}
        onFocus={handleFocus}
        placeholder={placeholder}
        className={`mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm ${className}`}
        required={required}
        autoComplete="off"
        id={id}
        name={name}
      />
      
      {showPredictions && predictions.length > 0 && typeof window !== 'undefined' && portalRect && createPortal(
        <div
          style={{ position: 'absolute', top: portalRect.top, left: portalRect.left, width: portalRect.width, zIndex: 10000 }}
          className="mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto"
        >
          {predictions.map((prediction, index) => (
            <div
              key={index}
              className="px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm"
              onClick={() => handleSuggestionClick(prediction)}
            >
              {prediction.description}
            </div>
          ))}
        </div>,
        document.body
      )}
    </div>
  );
}